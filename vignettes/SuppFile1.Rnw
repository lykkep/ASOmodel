% !TEX TS-program = pdflatexmk
\documentclass[a4paper,11pt]{article}

\usepackage[utf8]{inputenc}

\usepackage{Temp_short}
\usepackage[bottom]{footmisc}
\usepackage{commath}
\usepackage{caption} 
\setlength{\jot}{0.3cm}
\allowdisplaybreaks[2]

\newenvironment{Ncenter}{%
  \setlength\topsep{-10pt}
  \setlength\parskip{-10pt}
  \begin{center}
}{%
  \end{center}
}


\bibliographystyle{abbrv}

\newcommand{\kmo}{k_{\mathrm{OT \to O+T}}}
\newcommand{\kOpT}{k_{\mathrm{O+T \to OT}}}
\newcommand{\kmt}{k_{\mathrm{OTE \to OT+E}}}
\newcommand{\kt}{k_{\mathrm{OT+E \to OTE}}}
\newcommand{\kE}{k_{\mathrm{OTE \to OCE}}}
\newcommand{\kD}{k_{\mathrm{OC \to O+C}}}
\newcommand{\vp}{v_{\mathrm{prod}}}
\newcommand{\vd}{k_{\mathrm{T \to \emptyset}}}
\newcommand{\Trel}{T_{\rm{rel}}}
\newcommand{\EC}{EC_{\rm{50}}}
\newcommand{\KdOT}{K_{\mathrm{dOT}}}
\newcommand{\KdOTE}{K_{\mathrm{dOTE}}}
\newcommand{\Trelmin}{T_{\rm{rel,min}}}

\makeatletter 
\renewcommand{\thefigure}{S\@arabic\c@figure}
\renewcommand{\thesection}{~\hspace{-7.5 mm}}
\renewcommand{\thetable}{}
\addto\captionsenglish{\renewcommand{\figurename}{Supplementary Figure}}
\addto\captionsenglish{\renewcommand{\tablename}{Supplementary Table}}

\title{Supplementary Document for Pedersen et al. (2013)}
\author{Lykke Pedersen, \and Peter H Hagedorn, \and Marie Lindholm, \and Morten Lindow}
\date{}

\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

This document is the Supplementary Document for the manuscript entitled ``A kinetic model explains why shorter and less
affine enzyme-recruiting oligonucleotides can be
more potent" and it is a vignette for the R-package ASOmodels.

With the aim of maximising reproducibility, the functions and data used to produce the figures in the main manuscript and this supplementary document are available after installing the ASOmodels package in R.
<<>>=
require(devtools)
#install_github('ASOmodel',username='lykkep')
require(ASOmodels)
@
The ASOmodels package defines and documents the following functions that are used in this document: \\
~\\
\begin{tabular}{l l l}
\texttt{Trel} & \texttt{TrelNO} & \texttt{Trelstoc} \\
\texttt{plot.doseresponse} & \texttt{EP} & \texttt{diffASO} \\
\texttt{EC50NO} & \texttt{EC50stoc} & \texttt{EC50}
\end{tabular}

\tableofcontents

\newpage

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Supplementary Figure S1}
The R-function \texttt{Trel()} calculates $\Trel$ as a function of $O_t$ and the set of parameters as in the example below:
<<echo=TRUE>>=
#The parameters are in vector-format
parms <- c(Et = 1,KdOT = 0.3,kOpT = 0.2,KdOTE = 70,kOTpE = 5,	
           vprod = 0.2,kdegrad = 0.04,alpha=0.1,kcleav = 8)
Trel(Ot=1,param=parms)
@
$\Trel$ can be calculated for a range of different oligonucleotide concentrations ($O_t$) and from this a dose-response curve is obtained. Supplementary Figure~\ref{fig::Etot} shows the change in the dose-reponse curves as the parameters vary. These plots are produced using \texttt{plot.doseresponse()}.
%%%% FIGURE
<<S1,echo=FALSE,fig=TRUE,width=7,height=5,include=FALSE>>=
par(mfrow=c(3,3),mar=c(4,4,0.5,0.5))
#### Changing etot
plot.doseresponse('Et',c(5E-2,0.1,100),expression(E[t]),unit=~nM)
#### Changing alpha
plot.doseresponse('alpha',c(1E-3,0.5,0.75),unit='',
  expression(alpha==over(k[OT%->%O+T],k['*'*C %->% '* +'* C])))
#### Changing vt
plot.doseresponse('vprod',c(0.01,1,2),
  expression(v[prod]),unit=~'nM/min')
#### Changing kd
plot.doseresponse('kdegrad',c(1,1/5,1/10,1/50),
  expression(k[T %->% symbol("\306")]),unit=~min^-1)
#### Changing D1
plot.doseresponse('KdOT',c(0.01,10,50),expression(K[dOT]== over(k[OT %->% O+T],k[O+T %->% OT])),unit=~'nM')
#### Changing k1
plot.doseresponse('kOpT',c(0.001,0.01,1),
  expression(k[O+T %->% OT]),unit=~nM^-1*min^-1)
#### Changing D2
plot.doseresponse('KdOTE',c(1,10,1000),
  expression(K[dOTE]== over(k[OTE %->% OT+E],k[OT+E %->% OTE])),unit=~'nM')
#### Changing k2
plot.doseresponse('kOTpE',c(0.1,0.5,1000),
  expression(k[OT+E %->% OTE]),unit=~nM^-1*min^-1)
#### Changing kE
plot.doseresponse('kcleav',c(1,100,1000),
  expression(k[OTE %->% OCE]),unit=~min^-1)
@
\begin{figure}[!b]
\includegraphics[width=\textwidth]{SuppFile1-S1.pdf}
\caption{Dose-response curves for different values of $E_{t}$, $\alpha$, $\vp$, $\vd$, $\KdOT$, $\kOpT$, $\KdOTE$, $\kt$, and $\kE$ (top,left to bottom,right). Black lines correspond to the parameter values listed in Supplementary Table.}\label{fig::Etot}
\end{figure}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Supplementary Figure S2}
Using the R-function \texttt{drm()} from the drc package (v2.3-0) a dose-response curve is fitted to $\Trel$ as a function of $O_t$ to obtain an $\EC$-value and the efficacy. It is observed that the potency and efficacy varies for varying parameter values as shown in Supp. Fig.~\ref{fig:EP}.
<<echo=F>>=
EP <- function(value,par,param=parms){ #
  param[par] <- value
  Otseq <- 10^seq(-3,3,length=50)
  Trelseq <- Trel(Otseq,param=param)
  parms  <- coefficients(drm(Trelseq~Otseq,fct=LL.5()))
  out <- c(1-parms[2],exp((parms[1]*log(parms[4])+
          log(exp(log((2*(-parms[3]+parms[2]))/(
            parms[2]-1))/parms[5])-1))/parms[1]) )
  names(out) <- c('Eff','EC50')
  out
}
@
%Efficacy,echo=F,fig=FALSE,width=7,height=8,include=FALSE
<<echo=FALSE>>=
# AF <- function(x){
#   axis(1,at=10^pretty(log10(x)),labels=pretty10expLP(10^pretty(log10(x)),drop.1=T))
# }
# pdf('SuppFile1-Efficacy.pdf',width=7,height=9)
# layout(matrix(1:18,6,3,byrow=F),heights=rep(c(0.77,1),3),widths=rep(1,3))
# par(mgp=c(2.7,0.7,0),las=1,bty='l')
# y1lab <- 'Efficacy'; y2lab <- expression(italic('EC')[50]~'[nM]')
# value <- 10^seq(-2,2,by=0.25)
# plotFUN <- function(x,dat,xlab1){
#   par(mar=c(0.1,4,1,1))
#   plot(x,dat[1,],log='x',type='b',ylab=y1lab,xaxt='n',ylim=c(0,1),pch=20)
#   par(mar=c(4,4,0.1,1))
#   plot(x,dat[2,],log='xy',xlab=xlab1,type='b',ylab=y2lab,xaxt='n',pch=20)
#   AF(x)
# }
# #Etot
# #Et <- sapply(value,EP,par='Et')
# plotFUN(value,Et,expression(italic('E')[tot]~'[nM]'))
# #alpha
# #alpha <- sapply(10^seq(-4,0,by=0.25),EP,par='alpha')
# plotFUN(10^seq(-4,0,by=0.25),alpha,expression(alpha))
# #kcleav
# #kcleav <- sapply(value,EP,par='kcleav')
# plotFUN(value,kcleav,expression(italic('k')[OTE %->% OCE]~'[min'^-1*']'))
# #vprod
# #vprod <- sapply(value,EP,par='vprod')
# plotFUN(value,vprod,expression(italic('v')[prod]~'[nM/min]'))
# #kdegrad
# #kdegrad <- sapply(value,EP,par='kdegrad')
# plotFUN(value,kdegrad,xlab=expression(italic('k')[T %->% Ã˜]~'[min'^-1*']'))
# #kOpT
# #kOpT <- sapply(value,EP,par='kOpT')
# plotFUN(value,kOpT,expression(italic('k')[O+T %->% OT]~'[nM'^-1*'min'^-1*']'))
# #KdOTE
# #KdOTE <- sapply(10^seq(-1,3,by=0.2),EP,par='KdOTE')
# plotFUN(10^seq(-1,3,by=0.2),KdOTE,expression(italic('K')[dOTE]~'[nM]'))
# #kOTpE
# #kOTpE <- sapply(value,EP,par='kOTpE')
# plotFUN(value,kOTpE,expression(italic('k')[OT +E %->%OTE]~'[nM'^-1*'min'^-1*']'))
# #KdOT
# #kdOT <- sapply(value,EP,par='KdOT')
# plotFUN(value,kdOT,expression(italic('K')[dOT]~'[nM]'))
# dev.off()
@
\begin{figure}[!h]
\begin{Ncenter}
\includegraphics[width=\textwidth]{SuppFile1-Efficacy.pdf}
\end{Ncenter}
\caption{Efficacy and $\EC$ is plotted as functions of parameter values for $E_{\rm{tot}}$, $\KdOTE$, $\vp$, $\alpha$, $\kOpT$, $\kt$, $\vd$, $\kE$. }\label{fig:EP}
\end{figure}





%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Supplementary Figure S3}
The stochastic simulation of the model is carried out by use of the \texttt{ssa()} R-function from the GillespieSSA package (v.0.5-4). The inputs to ssa are an initial state vector (x0), which is the initial number of molecules, a propensity vector (a), which denotes the different states of the system, a state-change matrix (nu), which is the change in number of molecule (rows) if a reaction occur (column), the model-parameters (parms) and the final time (tf).
<<echo=T>>=
library(GillespieSSA)
#Model parameters
parms1 <- c(kOpT = 2E-5,kOTpE =50E-5 ,vprod = 150,  kdegrad = 0.04,		  
              kcleav = 2, kOT =0.06, kOTE=2, kC = 0.1)
#Initital state vector
x0 <- c(Tt=parms1["vprod"]/parms1["kdegrad"],
        OT=0,OTE=0,E=1e3,O=1e5,OCE=0,OC=0)
names(x0) <- c('Tt','OT','OTE','E','O','OCE','OC')
#Propensity vector
a <-  c("vprod","kOpT*O*Tt","kdegrad*Tt","kOT*OT","kOTE*OTE","kdegrad*OT",
        "kOTpE*OT*E","kdegrad*OTE","kcleav*OTE","kC*OC","kOTE*OCE" )
#State-change matrix
nu <- matrix(0,7,length(a))
dimnames(nu) <- list(names(x0),a)
#T
nu['Tt',c('vprod','kOT*OT')] <- 1
nu['Tt',c('kOpT*O*Tt','kdegrad*Tt')] <- -1 
#OT
nu['OT',c('kOpT*O*Tt','kOTE*OTE')] <- 1
nu['OT',c('kOT*OT','kOTpE*OT*E','kdegrad*OT')] <- -1
#OTE
nu['OTE',c('kOTpE*OT*E')] <- 1
nu['OTE',c('kOTE*OTE','kdegrad*OTE','kcleav*OTE')] <- -1
#E
nu['E',c('kOTE*OTE','kdegrad*OTE','kOTE*OCE')] <- 1
nu['E',c('kOTpE*OT*E')] <- -1
#O
nu['O',c('kOT*OT','kdegrad*OTE','kdegrad*OT','kC*OC')] <- 1
nu['O',c('kOpT*O*Tt')] <- -1
#OCE
nu['OCE',c('kcleav*OTE')] <- 1
nu['OCE',c('kOTE*OCE')] <- -1
#OC
nu['OC',c('kOTE*OCE')] <- 1
nu['OC',c('kC*OC')] <- -1
#The Gillespie simulation
Gillespie <- ssa( x0=x0,a=a,nu=nu,
      parms = parms1,tf=1E3,method = "ETL")
@
% Check that $[O]+[OT]+[OTE]+[OCE]+[OC] = O_t$ at all times:
% <<echo=T>>=
% range(rowSums(Gillespie$data[,c('O','OT','OTE','OCE','OC')])-
%         x0['O'])
% @
% Check that $[E]+[OTE]+[OCE] = E_t$ at all times:
% <<echo=T>>=
% range(rowSums(Gillespie$data[,c('OTE','OCE','E')])-x0['E'])
% @
<<Trel,echo=F,fig=TRUE,width=5,height=4,include=FALSE>>=
# plot of the time-trase for Trel
par(mar=c(4.5,4.5,1,1))
plot(Gillespie$data[,1],rowSums(Gillespie$data[,2:4])/(parms1["vprod"]/parms1["kdegrad"]),
		xlab='time (min)',ylab='Relative total target level',type='l')
@
Supplementary Figure~\ref{fig:Trelstoc} shows $\Trel$ from the Gillespie simulation.
\begin{figure}[!h]
\begin{Ncenter}
\includegraphics[width=0.6\textwidth]{SuppFile1-Trel.pdf}
\end{Ncenter}
\caption{The time-trace for the relative total target level when the model is simulated stochastically.}\label{fig:Trelstoc}
\end{figure}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Supplementary Figure S4}
After a while the stochastic simulation reaches a plateau. In Supplementary Figure~\ref{fig:Trelstoc} the plateu starts around $50$min. The mean of $\Trel$ within the plateu is calculated through the R-function \texttt{Trelstoc()}. Using this function we can generate dose-response curves (Supplementary Figure~\ref{fig:stocEC50},left). From these $\EC$-values can be calculated using \texttt{EC50stoc()} and they are subsequently plotted as a function of $\kmo$ (Supplementary Figure~\ref{fig:stocEC50},right).
Note that as in the deterministic case (see main manuscript) an optimal affinity is observed.
<<echo=T>>=
#### Sequence of k(OT -> O+T) values
lseq <- c(1,2.5,5,7.5)
lKOT <- c(1E-3*lseq[-1],1E-2*lseq,1E-1*lseq)
#### Generation of dose-response curves
DRcurve <- lapply(lKOT,function(ki){ 
            sapply(10^seq(2.5,6,by=0.2),
                   function(i) Trelstoc(i,kOT=ki)$Tstat)})
DRc <- lapply(DRcurve,function(x) x[,!is.na(x[3,])] )
#### Calculation of EC50
EC50_lKOT <- sapply(1:length(DRc),
              function(x){EC50stoc(DRc[[x]][2,],DRc[[x]][1,])})
@
<<EC50,echo=F,fig=TRUE,width=7,height=4,include=FALSE>>=
par(mfcol=c(1,2),mar=c(4,4.5,1,1),mgp=c(2.5,0.7,0))
N <- length(DRc)
plot(DRc[[1]][1,],DRc[[1]][2,],ylab='Relative total target level',ylim=c(0,1),
		xlab='Total oligonucleotide (molecules)',log='x',type='l',
		col=rainbow(N)[1],xlim=c(2E3,max(unlist(DRc))),lwd=2)
LegendS=as.expression(sapply(signif(lKOT[seq(1,11,by=2)],2),
                function(x) substitute(y==x,list(x=x,y=~k[OT %->% O+T]))))
legend('bottomleft',LegendS,#signif(KM[seq(1,11,by=2)],2)),
		col=rainbow(N)[seq(1,11,by=2)],lwd=2,bty='n',cex=0.6)
for(i in seq(3,11,by=2)){
	points(DRc[[i]][1,],DRc[[i]][2,],col=rainbow(N)[i],type='l',lwd=2)
}

plot(lKOT,EC50_lKOT,log='x',ylab=expression(EC[50]~'(molecules)'),
		xlab=expression(k['OT'%->%'O+T']~'(1/min)'))
@
\begin{figure}[!h]
\begin{Ncenter}
\includegraphics[width=\textwidth]{SuppFile1-EC50.pdf}
\end{Ncenter}
\caption{Left: Dose-response curves for various values of $\kmo$ (compare to Supplementary Figure S1,middle). Right: $\EC$ as a function of $\kmo$. A high value of $\kmo$ corresponds to a low affinity.}\label{fig:stocEC50}
\end{figure}
\newpage


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\section{Supplementary Figure S5}
 We are interested in $\EC$ as a function of $\KdOT$. This is calculated through the ASOmodel-function \texttt{EC50()} that takes $\KdOT$ and the set of parameters as input:
<<>>=
EC50(KdOT=0.1,param=parms)
@
For a range of $\KdOT$-values, the corresponding $\EC$-values can be calculated. These can be fitted to a parabola using the R-function \texttt{lm()}, see Supplementary Figure S2. 
<<>>==
D1_seq <- 10^seq(-3,3.2,by=0.25)
ECseq <- sapply(D1_seq,EC50)
FitPar <- lm(log10(ECseq) ~ log10(D1_seq) + I(log10(D1_seq)^2))
@
<<S31,echo=FALSE,fig=TRUE,width=4,height=3,include=FALSE>>=
par(mar=c(4.5,4.5,1,1))
plot(D1_seq,ECseq,log='xy',yaxt='n',type='l',xaxt='n',
     xlab=expression(K[dOT]~'(nM)'),ylab=expression(EC[50]~'(nM)'))
axis(2,at=c(2,20,200),labels=c(2,20,200),las=2)
axis(1,at=10^pretty(log10(D1_seq)),
     labels=pretty10expLP(10^pretty(log10(D1_seq)),drop.1=T),)
Parfun <- function(D1){
  tmp <- coefficients(FitPar) 
  10^(tmp[1]+tmp[2]*log10(D1)+tmp[3]*log10(D1)^2)}
lines(D1_seq,Parfun(D1_seq), col='red')
f <- summary(FitPar)$fstatistic
p <- pf(f[1],f[2],f[3],lower.tail=F)
legend('top',legend=paste('p-value =',signif(p,2)),bty='n')
legend('bottomright',c('model','fit'),col=c('black','red'),lwd=2,bty='n')
@
\begin{figure}[!h]
\begin{Ncenter}
\includegraphics[width=0.6\textwidth]{SuppFile1-S31.pdf}
\end{Ncenter}
\caption{$\EC$ as a function of $\KdOT$ is fitted on a log-log scale to a parabola.}\label{fig::Optfit}
\end{figure}


% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Supplementary Figure S6}
% \begin{figure}[!h]
% \begin{Ncenter}
% \includegraphics[width=0.65\textwidth]{SuppFig_PS.pdf}
% \end{Ncenter}
% \caption{The effect on $T_m$ of a phosphorothioate backbone was estimated using published data from Ref. \cite{Hashem:1998kf}.}\label{fig:figPS}
% \end{figure}
% 
% 
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% \section{Supplementary Figure S7}
% \begin{figure}[!h]
% \begin{Ncenter}
% \includegraphics[width=\textwidth]{SuppFigS3.pdf}
% \end{Ncenter}
% \caption{Measured melting temperature versus predicted melting temperature. There are clear correlations ($r > 0.92$, $P < 0.01$, Pearson's correlation) between predicted and measured $T_m$. Pedersen et al: 4 LNA-modified oligonucleotides targeting apolipoprotein B (this work), Stanton et al: 14 LNA-modified oligonucleotides targeting the glucocorticoid receptor \cite{Stanton:2012fu}. Frieden et al: 21 LNA-modified oligonucleotides targeting the luciferase firefly gene \cite{Frieden:2003er}. Melting curves were recorded with a Perkin Elmer spectrophotometer. Oligonucleotide and its complementary RNA, both at 1.5$\mu M$, were dissolved in buffer (20mM phosphate buffer, 100mM NaCl, 0.1nM EDTA, pH 7). Samples were denatured at $95^\circ$C for 3min and slowly cooled to $20^\circ$C prior to measurements. Melting curves were recorded at 260nm using a heating rate of 1$^\circ$C/min, a slit of 2nm and a response of 0.2s. From this, $T_m$-values were obtained from the maxima of the first derivatives of the melting curves.}\label{fig:figTm}
% \end{figure}


\newpage
\bibliography{ASOmodels}


\end{document}